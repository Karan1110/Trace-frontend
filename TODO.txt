1.  REMOVE education
2.  UPDATE and DELETE users
3.  REMOVE experiences
4.  ADD leaves for an user
5.  READ leaderboards
6.  READ the current user's pending tickets in home page
7.  login
8.  UPDATE and DELETE meetings*
9.  READ, ADD and REMOVE - Reviews*
10. SEARCH  - tickets and users based on all properties*
11. ADD skills to an user - skills
12. READ statistics
























/* 
router.put("/", [auth, isadmin], async (req, res) => {
  let transaction
  try {
    const { user_id } = req.body

    transaction = await db.transaction({
      isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE,
    })

    const user = await user.findByPk(user_id)

    if (!user) {
      await transaction.rollback()
      return res.status(400).send("User not found")
    }

    const meeting_member = await MeetingMember.findOne({
      where: {
        user_id: req.body.user_id,
        meeting_id: req.body.meeting_id,
      },
    })

    const meeting = await Meeting.findByPk(meeting_member.meeting_id)

    // for reference in meeting
    const start = moment(meeting.from)
    const end = moment(meeting.to)
    const meetingDiff = end.diff(start, "minutes") // Calculate the meeting diff in minutes

    // for reference in meeting_member
    const startt = moment(meeting_member.from)
    const endd = moment(meeting_member.to)
    const meetingDiffMember = endd.diff(startt, "minutes") // Calculate the meeting diff in minutes

    // to add in update
    const user_start = moment(req.body.from)
    const user_end = moment(req.body.to)
    const userDiff = user_end.diff(user_start, "minutes") // Calculate the user's diff in minutes

    const attendedMeetingPercentile = (100 / meetingDiff) * userDiff // Calculate the percentile and round to two decimal places
    const attendedMeetingPercentileMember =
      (100 / meetingDiff) * meetingDiffMember // Calculate the percentile and round to two decimal places

    // temp for adding in db
    // tempp for reference meeting_member
    const temp = Math.round(attendedMeetingPercentile) / 100
    const tempp = Math.round(attendedMeetingPercentileMember) / 100

    console.log(`this is fucking`, temp, tempp)

    if (isNaN(tempp) === false) {
      if (tempp > 1) {
        return res
          .status(400)
          .send("The input has exceeded the meeting fraction.")
      }
    }

    await MeetingMember.update(
      {
        to: req.body.to,
        from: req.body.from,
      },
      {
        where: {
          user_id: req.body.user_id,
          meeting_id: req.body.meeting_id,
        },
        transaction,
      }
    )

    await user.update(
      {
        attended_meetings: Sequelize.literal(`attended_meetings + ${temp}`),
      },
      {
        where: {
          id: user_id,
        },
        transaction,
      }
    )

    await transaction.commit()
    res.redirect("/users/me")
  } catch (ex) {
    if (transaction) {
      await transaction.rollback()
    }
    winston.error(ex)
    res.status(500).send("Something failed.")
  }
}) 
*/
